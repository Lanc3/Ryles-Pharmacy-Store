import { error, os, output, ui } from '@shopify/cli-kit';
import ngrok from 'ngrok';
const NgrokError = (ngrokErrorMessage) => {
    return new error.Abort(`The ngrok tunnel could not be started.\n\n${ngrokErrorMessage}`, buildTryMessage(ngrokErrorMessage));
};
export async function start(options) {
    if (!(await ngrok.validConfig())) {
        const token = await tokenPrompt();
        await authenticate(token);
    }
    return ngrok.connect({ proto: 'http', addr: options.port }).catch((e) => {
        throw NgrokError(e.message);
    });
}
export async function authenticate(token) {
    if (!token) {
        token = await tokenPrompt(false);
    }
    await ngrok.authtoken(token);
    await ngrok.upgradeConfig();
}
async function tokenPrompt(showExplanation = true) {
    const explanation = showExplanation ? '\nTo make your local code accessible to your dev store, you need to use a ' +
        'Shopify-trusted tunneling service called ngrok. ' : '';
    const ngrokURL = 'https://dashboard.ngrok.com/get-started/your-authtoken';
    const link = output.token.link(ngrokURL, ngrokURL);
    output.info(output.content `${explanation}To sign up and get an auth token: ${link}\n`);
    const question = {
        type: 'password',
        name: 'token',
        message: 'Enter your ngrok token.',
        validate: (value) => {
            if (value.length === 0) {
                return 'Token cannot be empty';
            }
            return true;
        },
    };
    const input = await ui.prompt([question]);
    return input.token;
}
function buildTryMessage(nrokErrorMessage) {
    if (/err_ngrok_108/.test(nrokErrorMessage)) {
        const { platform } = os.platformAndArch();
        let tryMessage = 'Kill all the ngrok processes with ';
        if (platform === 'windows') {
            return tryMessage.concat(output.content `${output.token.genericShellCommand('taskkill /f /im ngrok.exe')}`.value);
        }
        else {
            return tryMessage.concat(output.content `${output.token.genericShellCommand('killall ngrok')}`.value);
        }
    }
    else if (/err_ngrok_105|err_ngrok_106|err_ngrok_107/.test(nrokErrorMessage)) {
        return output.content `Update your ngrok token with ${output.token.genericShellCommand('shopify ngrok auth')}`.value;
    }
    return undefined;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHVubmVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3R1bm5lbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQVUsRUFBRSxFQUFDLE1BQU0sa0JBQWtCLENBQUE7QUFDOUQsT0FBTyxLQUFLLE1BQU0sT0FBTyxDQUFBO0FBTXpCLE1BQU0sVUFBVSxHQUFHLENBQUMsaUJBQXlCLEVBQUUsRUFBRTtJQUMvQyxPQUFPLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyw2Q0FBNkMsaUJBQWlCLEVBQUUsRUFBRSxlQUFlLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFBO0FBQzlILENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsS0FBSyxDQUFDLE9BQXFCO0lBQy9DLElBQUksQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUU7UUFDaEMsTUFBTSxLQUFLLEdBQUcsTUFBTSxXQUFXLEVBQUUsQ0FBQTtRQUNqQyxNQUFNLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQTtLQUMxQjtJQUVELE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQVEsRUFBRSxFQUFFO1FBQzNFLE1BQU0sVUFBVSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUM3QixDQUFDLENBQUMsQ0FBQTtBQUNKLENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLFlBQVksQ0FBQyxLQUFhO0lBQzlDLElBQUksQ0FBQyxLQUFLLEVBQUU7UUFDVixLQUFLLEdBQUcsTUFBTSxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUE7S0FDakM7SUFDRCxNQUFNLEtBQUssQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDNUIsTUFBTSxLQUFLLENBQUMsYUFBYSxFQUFFLENBQUE7QUFDN0IsQ0FBQztBQUVELEtBQUssVUFBVSxXQUFXLENBQUMsa0JBQTJCLElBQUk7SUFDeEQsTUFBTSxXQUFXLEdBQUcsZUFBZSxDQUFDLENBQUMsQ0FBQyw0RUFBNEU7UUFDbEgsa0RBQWtELENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQTtJQUN2RCxNQUFNLFFBQVEsR0FBRyx3REFBd0QsQ0FBQTtJQUN6RSxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUE7SUFDbEQsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFBLEdBQUcsV0FBVyxxQ0FBcUMsSUFBSSxJQUFJLENBQUMsQ0FBQTtJQUV0RixNQUFNLFFBQVEsR0FBZ0I7UUFDNUIsSUFBSSxFQUFFLFVBQVU7UUFDaEIsSUFBSSxFQUFFLE9BQU87UUFDYixPQUFPLEVBQUUseUJBQXlCO1FBQ2xDLFFBQVEsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFO1lBQ2xCLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7Z0JBQ3RCLE9BQU8sdUJBQXVCLENBQUE7YUFDL0I7WUFDRCxPQUFPLElBQUksQ0FBQTtRQUNiLENBQUM7S0FDRixDQUFBO0lBRUQsTUFBTSxLQUFLLEdBQW9CLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUE7SUFDMUQsT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFBO0FBQ3BCLENBQUM7QUFFRCxTQUFTLGVBQWUsQ0FBQyxnQkFBd0I7SUFDL0MsSUFBSSxlQUFlLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEVBQUU7UUFDMUMsTUFBTSxFQUFDLFFBQVEsRUFBQyxHQUFHLEVBQUUsQ0FBQyxlQUFlLEVBQUUsQ0FBQTtRQUN2QyxJQUFJLFVBQVUsR0FBRyxvQ0FBb0MsQ0FBQTtRQUNyRCxJQUFHLFFBQVEsS0FBSyxTQUFTLEVBQUU7WUFDekIsT0FBTyxVQUFVLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUEsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLG1CQUFtQixDQUFDLDJCQUEyQixDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQTtTQUNqSDthQUFNO1lBQ0wsT0FBTyxVQUFVLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUEsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLG1CQUFtQixDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUE7U0FDckc7S0FDRjtTQUFNLElBQUksMkNBQTJDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEVBQUU7UUFDN0UsT0FBTyxNQUFNLENBQUMsT0FBTyxDQUFBLGdDQUFnQyxNQUFNLENBQUMsS0FBSyxDQUFDLG1CQUFtQixDQUFDLG9CQUFvQixDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUE7S0FDcEg7SUFDRCxPQUFPLFNBQVMsQ0FBQTtBQUNsQixDQUFDIn0=