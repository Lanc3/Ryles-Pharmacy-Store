"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isStale = exports.deleteItemFromCache = exports.setItemInCache = exports.getItemFromCache = exports.generateSubRequestCacheControlHeader = void 0;
const runtime_1 = require("./runtime");
const hash_1 = require("../utilities/hash");
const CacheApi = __importStar(require("./cache"));
const CachingStrategy_1 = require("./CachingStrategy");
/**
 * Wrapper Cache functions for sub queries
 */
/**
 * Cache API is weird. We just need a full URL, so we make one up.
 */
function getKeyUrl(key) {
    return `https://shopify.dev/?${key}`;
}
function getCacheOption(userCacheOptions) {
    return userCacheOptions || (0, CachingStrategy_1.CacheSeconds)();
}
function generateSubRequestCacheControlHeader(userCacheOptions) {
    return CacheApi.generateDefaultCacheControlHeader(getCacheOption(userCacheOptions));
}
exports.generateSubRequestCacheControlHeader = generateSubRequestCacheControlHeader;
/**
 * Get an item from the cache. If a match is found, returns a tuple
 * containing the `JSON.parse` version of the response as well
 * as the response itself so it can be checked for staleness.
 */
async function getItemFromCache(key) {
    const cache = (0, runtime_1.getCache)();
    if (!cache) {
        return;
    }
    const url = getKeyUrl((0, hash_1.hashKey)(key));
    const request = new Request(url);
    const response = await CacheApi.getItemFromCache(request);
    if (!response) {
        return;
    }
    return [await response.json(), response];
}
exports.getItemFromCache = getItemFromCache;
/**
 * Put an item into the cache.
 */
async function setItemInCache(key, value, userCacheOptions) {
    const cache = (0, runtime_1.getCache)();
    if (!cache) {
        return;
    }
    const url = getKeyUrl((0, hash_1.hashKey)(key));
    const request = new Request(url);
    const response = new Response(JSON.stringify(value));
    await CacheApi.setItemInCache(request, response, getCacheOption(userCacheOptions));
}
exports.setItemInCache = setItemInCache;
async function deleteItemFromCache(key) {
    const cache = (0, runtime_1.getCache)();
    if (!cache)
        return;
    const url = getKeyUrl((0, hash_1.hashKey)(key));
    const request = new Request(url);
    await CacheApi.deleteItemFromCache(request);
}
exports.deleteItemFromCache = deleteItemFromCache;
/**
 * Manually check the response to see if it's stale.
 */
function isStale(key, response) {
    return CacheApi.isStale(new Request(getKeyUrl((0, hash_1.hashKey)(key))), response);
}
exports.isStale = isStale;
