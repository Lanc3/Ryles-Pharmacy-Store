"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// @ts-ignore
const plugin_1 = __importDefault(require("@shopify/hydrogen/vendor/react-server-dom-vite/plugin"));
const vite_plugin_hydrogen_middleware_1 = require("./vite-plugin-hydrogen-middleware");
const vite_plugin_hydrogen_virtual_files_1 = require("./vite-plugin-hydrogen-virtual-files");
const viteception_1 = require("../viteception");
function default_1() {
    return (0, plugin_1.default)({
        isServerComponentImporterAllowed(importer, source) {
            return (
            // Always allow the entry server (e.g. App.server.jsx) to be imported
            // in other files such as worker.js or server.js.
            source.includes(vite_plugin_hydrogen_middleware_1.HYDROGEN_DEFAULT_SERVER_ENTRY) ||
                /(index|entry-server|hydrogen\.config)\.[jt]s/.test(importer) ||
                // Support importing server components for testing
                // TODO: revisit this when RSC splits into two bundles
                /\.test\.[tj]sx?$/.test(importer));
        },
        async findClientComponentsForClientBuild() {
            const { server } = await (0, viteception_1.viteception)([
                // Load server entry to discover client components early
                vite_plugin_hydrogen_middleware_1.HYDROGEN_DEFAULT_SERVER_ENTRY,
                // Route globs are placed in a virtual module and need to
                // be loaded to discover client components in routes
                vite_plugin_hydrogen_virtual_files_1.VIRTUAL_PROXY_HYDROGEN_ROUTES_ID,
            ]);
            // At this point, the server has loaded all the components in the module graph
            return plugin_1.default.findClientComponentsFromServer(server);
        },
    });
}
exports.default = default_1;
