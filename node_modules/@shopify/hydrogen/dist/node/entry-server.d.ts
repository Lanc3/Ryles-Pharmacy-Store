/// <reference types="node" />
import { Logger } from './utilities/log';
import type { ImportGlobEagerOutput } from './types';
import { ServerComponentResponse } from './framework/Hydration/ServerComponentResponse.server';
import { ServerComponentRequest } from './framework/Hydration/ServerComponentRequest.server';
import type { ServerResponse, IncomingMessage } from 'http';
import { RuntimeContext } from './framework/runtime';
declare global {
    var __WORKER__: boolean;
}
interface RequestHandlerOptions {
    indexTemplate: string | ((url: string) => Promise<string | {
        default: string;
    }>);
    cache?: Cache;
    streamableResponse?: ServerResponse;
    dev?: boolean;
    context?: RuntimeContext;
    nonce?: string;
    buyerIpHeader?: string;
}
export interface RequestHandler {
    (request: Request | IncomingMessage, options: RequestHandlerOptions): Promise<Response | undefined>;
}
export declare const renderHydrogen: (App: any) => RequestHandler;
declare type SharedServerProps = {
    state?: object | null;
    request: ServerComponentRequest;
    response: ServerComponentResponse;
    log: Logger;
};
export declare type AppProps = SharedServerProps & {
    routes?: ImportGlobEagerOutput;
};
export default renderHydrogen;
