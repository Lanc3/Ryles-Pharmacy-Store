"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Image = void 0;
const React = __importStar(require("react"));
const utilities_1 = require("../../utilities");
function Image(props) {
    if (!props.data && !props.src) {
        throw new Error(`<Image/>: requires either a 'data' or 'src' prop.`);
    }
    if (__DEV__ && props.data && props.src) {
        console.warn(`<Image/>: using both 'data' and 'src' props is not supported; using the 'data' prop by default`);
    }
    if (props.data) {
        return React.createElement(ShopifyImage, { ...props });
    }
    else {
        return React.createElement(ExternalImage, { ...props });
    }
}
exports.Image = Image;
function ShopifyImage({ data, width, height, loading, loader = utilities_1.shopifyImageLoader, loaderOptions, ...rest }) {
    var _a, _b, _c, _d, _e, _f;
    if (!data.url) {
        throw new Error(`<Image/>: the 'data' prop requires the 'url' property`);
    }
    if (__DEV__ && !data.altText && !rest.alt) {
        console.warn(`<Image/>: the 'data' prop should have the 'altText' property, or the 'alt' prop, and one of them should not be empty. ${`Image: ${(_a = data.id) !== null && _a !== void 0 ? _a : data.url}`}`);
    }
    const { width: finalWidth, height: finalHeight } = (0, utilities_1.getShopifyImageDimensions)(data, loaderOptions);
    if ((__DEV__ && !finalWidth) || !finalHeight) {
        console.warn(`<Image/>: the 'data' prop requires either 'width' or 'data.width', and 'height' or 'data.height' properties. ${`Image: ${(_b = data.id) !== null && _b !== void 0 ? _b : data.url}`}`);
    }
    let finalSrc = data.url;
    if (loader) {
        finalSrc = loader({
            ...loaderOptions,
            src: data.url,
            width: finalWidth,
            height: finalHeight,
        });
        if (typeof finalSrc !== 'string' || !finalSrc) {
            throw new Error(`<Image/>: 'loader' did not return a valid string. ${`Image: ${(_c = data.id) !== null && _c !== void 0 ? _c : data.url}`}`);
        }
    }
    /* eslint-disable hydrogen/prefer-image-component */
    return (React.createElement("img", { id: (_d = data.id) !== null && _d !== void 0 ? _d : '', alt: (_f = (_e = data.altText) !== null && _e !== void 0 ? _e : rest.alt) !== null && _f !== void 0 ? _f : '', loading: loading !== null && loading !== void 0 ? loading : 'lazy', ...rest, src: finalSrc, width: finalWidth !== null && finalWidth !== void 0 ? finalWidth : undefined, height: finalHeight !== null && finalHeight !== void 0 ? finalHeight : undefined }));
    /* eslint-enable hydrogen/prefer-image-component */
}
function ExternalImage({ src, width, height, alt, loader, loaderOptions, loading, ...rest }) {
    if (!width || !height) {
        throw new Error(`<Image/>: when 'src' is provided, 'width' and 'height' are required and need to be valid values (i.e. greater than zero). Provided values: 'src': ${src}, 'width': ${width}, 'height': ${height}`);
    }
    if (__DEV__ && !alt) {
        console.warn(`<Image/>: when 'src' is provided, 'alt' should also be provided. ${`Image: ${src}`}`);
    }
    let finalSrc = src;
    if (loader) {
        finalSrc = loader({ src, width, height, ...loaderOptions });
        if (typeof finalSrc !== 'string' || !finalSrc) {
            throw new Error(`<Image/>: 'loader' did not return a valid string`);
        }
    }
    /* eslint-disable hydrogen/prefer-image-component */
    return (React.createElement("img", { ...rest, src: finalSrc, width: width, height: height, alt: alt !== null && alt !== void 0 ? alt : '', loading: loading !== null && loading !== void 0 ? loading : 'lazy' }));
    /* eslint-enable hydrogen/prefer-image-component */
}
