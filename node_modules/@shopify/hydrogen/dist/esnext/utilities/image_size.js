// TODO: Are there other CDNs missing from here?
const PRODUCTION_CDN_HOSTNAMES = [
    'cdn.shopify.com',
    'cdn.shopifycdn.net',
    'shopify-assets.shopifycdn.com',
    'shopify-assets.shopifycdn.net',
];
const LOCAL_CDN_HOSTNAMES = ['spin.dev'];
const ALL_CDN_HOSTNAMES = [...PRODUCTION_CDN_HOSTNAMES, ...LOCAL_CDN_HOSTNAMES];
/**
 * Adds image size parameters to an image URL hosted by Shopify's CDN
 */
export function addImageSizeParametersToUrl({ src, width, height, crop, scale, }) {
    const newUrl = new URL(src);
    width && newUrl.searchParams.append('width', width.toString());
    height && newUrl.searchParams.append('height', height.toString());
    crop && newUrl.searchParams.append('crop', crop);
    scale && newUrl.searchParams.append('scale', scale.toString());
    return newUrl.toString();
}
export function shopifyImageLoader(params) {
    const newSrc = new URL(params.src);
    const isShopifyServedImage = ALL_CDN_HOSTNAMES.some((allowedHostname) => newSrc.hostname.endsWith(allowedHostname));
    if (!isShopifyServedImage ||
        (!params.width && !params.height && !params.crop && !params.scale)) {
        return params.src;
    }
    return addImageSizeParametersToUrl(params);
}
export function getShopifyImageDimensions(image, options) {
    // Storefront API could return null dimension values for images that are not hosted on Shopify CDN
    // The API dimensions references the image's intrinstic/natural dimensions and provides image aspect ratio information
    const apiWidth = image.width;
    const apiHeight = image.height;
    if (apiWidth && apiHeight && ((options === null || options === void 0 ? void 0 : options.width) || (options === null || options === void 0 ? void 0 : options.height))) {
        const optionWidth = (options === null || options === void 0 ? void 0 : options.width)
            ? parseInt(options.width.toString(), 10)
            : undefined;
        const optionHeight = (options === null || options === void 0 ? void 0 : options.height)
            ? parseInt(options.height.toString(), 10)
            : undefined;
        // Use option defined width & height
        if (optionWidth && optionHeight) {
            return { width: optionWidth, height: optionHeight };
        }
        // Calculate width from aspect ratio
        if (!optionWidth && optionHeight) {
            return {
                width: Math.round((apiWidth / apiHeight) * optionHeight),
                height: optionHeight,
            };
        }
        // Calculate height from aspect ratio
        if (optionWidth && !optionHeight) {
            return {
                width: optionWidth,
                height: Math.round((apiHeight / apiWidth) * optionWidth),
            };
        }
    }
    return { width: apiWidth, height: apiHeight };
}
